{"version":3,"sources":["../src/SignedCertificateTimestampList.js"],"names":["certificate","issuerCertificate","logs","index","parsedValue","tbs","issuerId","stream","SeqStream","preCert","crypto","Promise","reject","i","extensions","length","extnID","timestamps","Error","splice","encodeTBS","toBER","digest","name","Uint8Array","subjectPublicKeyInfo","toSchema","appendView","appendUint24","byteLength","_stream","_buffer","slice","_length","verifyArray","timestamp","verifyResult","verify","push","verifySCTsForCertificate","asn1js","SignedCertificateTimestamp","constructor","parameters","version","defaultValues","logID","hashAlgorithm","signatureAlgorithm","signature","fromSchema","schema","fromStream","memberName","ArrayBuffer","Date","Any","RawData","seqStream","ByteStream","buffer","data","blockLength","getUint16","getBlock","extensionsLength","signatureLength","signatureData","asn1","fromBER","offset","result","toStream","appendUint16","valueBeforeDecode","appendChar","timeBuffer","timeView","baseArray","valueOf","set","_hashAlgorithm","toLowerCase","_signatureAlgorithm","_signature","toJSON","dataType","logId","publicKeyBase64","publicKeyInfo","log","log_id","key","PublicKeyInfo","subtle","verifyWithPublicKey","valueBlock","valueHex","algorithmId","SignedCertificateTimestampList","compareWithDefault","memberValue","names","optional","OctetString","blockName","dataLength","overallLength","timestampsData","timestampStream","view","Array","from","element"],"mappings":";;;;;;;AA+hBA;AACA;;;;;;;;;;;8BAUO,WAAwCA,WAAxC,EAAqDC,iBAArD,EAAwEC,IAAxE,EAA8EC,QAAS,CAAC,CAAxF,EACP;AACC;AACA,MAAIC,cAAc,IAAlB;AACA,MAAIC,GAAJ;AACA,MAAIC,QAAJ;;AAEA,QAAMC,SAAS,IAAIC,uBAAJ,EAAf;;AAEA,MAAIC,OAAJ;AACA;;AAEA;AACA,QAAMC,SAAS,wBAAf;AACA,MAAG,OAAOA,MAAP,KAAkB,WAArB,EACC,OAAOC,QAAQC,MAAR,CAAe,mCAAf,CAAP;AACD;;AAEA;AACA,OAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIb,YAAYc,UAAZ,CAAuBC,MAA1C,EAAkDF,GAAlD,EACA;AACC,WAAOb,YAAYc,UAAZ,CAAuBD,CAAvB,EAA0BG,MAAjC;AAEC,SAAK,yBAAL;AACC;AACCZ,oBAAcJ,YAAYc,UAAZ,CAAuBD,CAAvB,EAA0BT,WAAxC;;AAEA,UAAGA,YAAYa,UAAZ,CAAuBF,MAAvB,KAAkC,CAArC,EACC,MAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;;AAEDlB,kBAAYc,UAAZ,CAAuBK,MAAvB,CAA8BN,CAA9B,EAAiC,CAAjC;AACA;AACD;AACD;AAZD;AAcA;AACD;;AAEA;AACA,MAAGT,gBAAgB,IAAnB,EACC,MAAM,IAAIc,KAAJ,CAAU,0EAAV,CAAN;AACD;;AAEA;AACAb,QAAML,YAAYoB,SAAZ,GAAwBC,KAAxB,CAA8B,KAA9B,CAAN;AACA;;AAEA;AACAf,aAAW,MAAMI,OAAOY,MAAP,CAAc,EAAEC,MAAM,SAAR,EAAd,EAAmC,IAAIC,UAAJ,CAAevB,kBAAkBwB,oBAAlB,CAAuCC,QAAvC,GAAkDL,KAAlD,CAAwD,KAAxD,CAAf,CAAnC,CAAjB;AACA;;AAEA;AACAd,SAAOoB,UAAP,CAAkB,IAAIH,UAAJ,CAAelB,QAAf,CAAlB;AACAC,SAAOqB,YAAP,CAAoBvB,IAAIwB,UAAxB;AACAtB,SAAOoB,UAAP,CAAkB,IAAIH,UAAJ,CAAenB,GAAf,CAAlB;;AAEAI,YAAUF,OAAOuB,OAAP,CAAeC,OAAf,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCzB,OAAO0B,OAAvC,CAAV;AACA;;AAEA;AACA,MAAG9B,UAAW,CAAC,CAAf,EACA;AACC,SAAM+B,cAAc,EAApB;;AADD;AAAA;AAAA;;AAAA;AAGC,0BAAuB9B,YAAYa,UAAnC,mIACA;AAAA,WADUkB,SACV;;AACC,WAAMC,eAAe,MAAMD,UAAUE,MAAV,CAAiBnC,IAAjB,EAAuBO,OAAvB,EAAgC,CAAhC,CAA3B;AACAyB,iBAAYI,IAAZ,CAAiBF,YAAjB;AACA;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASC,UAAOF,WAAP;AACA;;AAED,MAAG/B,SAASC,YAAYa,UAAZ,CAAuBF,MAAnC,EACCZ,QAASC,YAAYa,UAAZ,CAAuBF,MAAvB,GAAgC,CAAzC;;AAED,SAAO,CAAC,MAAMX,YAAYa,UAAZ,CAAuBd,KAAvB,EAA8BkC,MAA9B,CAAqCnC,IAArC,EAA2CO,OAA3C,EAAoD,CAApD,CAAP,CAAP;AACA;AACA,E;;iBA9EqB8B,wB;;;;AA+EtB;;;AAznBA;;IAAYC,M;;AACZ;;AACA;;AACA;;AACA;;;;;;;;;;AACA;AACO,MAAMC,0BAAN,CACP;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,OAAL,GAAe,iCAAmBD,UAAnB,EAA+B,SAA/B,EAA0CF,2BAA2BI,aAA3B,CAAyC,SAAzC,CAA1C,CAAf;AACA;;;;AAIA,OAAKC,KAAL,GAAa,iCAAmBH,UAAnB,EAA+B,OAA/B,EAAwCF,2BAA2BI,aAA3B,CAAyC,OAAzC,CAAxC,CAAb;AACA;;;;AAIA,OAAKV,SAAL,GAAiB,iCAAmBQ,UAAnB,EAA+B,WAA/B,EAA4CF,2BAA2BI,aAA3B,CAAyC,WAAzC,CAA5C,CAAjB;AACA;;;;AAIA,OAAK/B,UAAL,GAAkB,iCAAmB6B,UAAnB,EAA+B,YAA/B,EAA6CF,2BAA2BI,aAA3B,CAAyC,YAAzC,CAA7C,CAAlB;AACA;;;;AAIA,OAAKE,aAAL,GAAqB,iCAAmBJ,UAAnB,EAA+B,eAA/B,EAAgDF,2BAA2BI,aAA3B,CAAyC,eAAzC,CAAhD,CAArB;AACA;;;;AAIA,OAAKG,kBAAL,GAA0B,iCAAmBL,UAAnB,EAA+B,oBAA/B,EAAqDF,2BAA2BI,aAA3B,CAAyC,oBAAzC,CAArD,CAA1B;AACA;;;;AAIA,OAAKI,SAAL,GAAiB,iCAAmBN,UAAnB,EAA+B,WAA/B,EAA4CF,2BAA2BI,aAA3B,CAAyC,WAAzC,CAA5C,CAAjB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKO,UAAL,CAAgBP,WAAWQ,MAA3B;AACD;;AAEA;AACA,MAAG,YAAYR,UAAf,EACC,KAAKS,UAAL,CAAgBT,WAAWpC,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOsC,aAAP,CAAqBQ,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,SAAL;AACC,WAAO,CAAP;AACD,QAAK,OAAL;AACA,QAAK,YAAL;AACC,WAAO,IAAIC,WAAJ,CAAgB,CAAhB,CAAP;AACD,QAAK,WAAL;AACC,WAAO,IAAIC,IAAJ,CAAS,CAAT,CAAP;AACD,QAAK,eAAL;AACA,QAAK,oBAAL;AACC,WAAO,EAAP;AACD,QAAK,WAAL;AACC,WAAO,IAAIf,OAAOgB,GAAX,EAAP;AACD;AACC,UAAM,IAAItC,KAAJ,CAAW,6DAA4DmC,UAAW,EAAlF,CAAN;AAfF;AAiBA;AACD;AACA;;;;AAIAH,YAAWC,MAAX,EACA;AACC,MAAIA,kBAAkBX,OAAOiB,OAA1B,KAAuC,KAA1C,EACC,MAAM,IAAIvC,KAAJ,CAAU,oFAAV,CAAN;;AAED,QAAMwC,YAAY,IAAIlD,uBAAJ,CAAc;AAC/BD,WAAQ,IAAIoD,wBAAJ,CAAe;AACtBC,YAAQT,OAAOU;AADO,IAAf;AADuB,GAAd,CAAlB;;AAMA,OAAKT,UAAL,CAAgBM,SAAhB;AACA;AACD;AACA;;;;AAIAN,YAAW7C,MAAX,EACA;AACC,QAAMuD,cAAcvD,OAAOwD,SAAP,EAApB;;AAEA,OAAKnB,OAAL,GAAgBrC,OAAOyD,QAAP,CAAgB,CAAhB,CAAD,CAAqB,CAArB,CAAf;;AAEA,MAAG,KAAKpB,OAAL,KAAiB,CAApB,EACA;AACC,QAAKE,KAAL,GAAc,IAAItB,UAAJ,CAAejB,OAAOyD,QAAP,CAAgB,EAAhB,CAAf,CAAD,CAAsCJ,MAAtC,CAA6C5B,KAA7C,CAAmD,CAAnD,CAAb;AACA,QAAKG,SAAL,GAAiB,IAAIoB,IAAJ,CAAS,2BAAa,IAAI/B,UAAJ,CAAejB,OAAOyD,QAAP,CAAgB,CAAhB,CAAf,CAAb,EAAiD,CAAjD,CAAT,CAAjB;;AAEA;AACA,SAAMC,mBAAmB1D,OAAOwD,SAAP,EAAzB;AACA,QAAKjD,UAAL,GAAmB,IAAIU,UAAJ,CAAejB,OAAOyD,QAAP,CAAgBC,gBAAhB,CAAf,CAAD,CAAoDL,MAApD,CAA2D5B,KAA3D,CAAiE,CAAjE,CAAlB;AACA;;AAEA;AACA,WAAQzB,OAAOyD,QAAP,CAAgB,CAAhB,CAAD,CAAqB,CAArB,CAAP;AAEC,SAAK,CAAL;AACC,UAAKjB,aAAL,GAAqB,MAArB;AACA;AACD,SAAK,CAAL;AACC,UAAKA,aAAL,GAAqB,KAArB;AACA;AACD,SAAK,CAAL;AACC,UAAKA,aAAL,GAAqB,MAArB;AACA;AACD,SAAK,CAAL;AACC,UAAKA,aAAL,GAAqB,QAArB;AACA;AACD,SAAK,CAAL;AACC,UAAKA,aAAL,GAAqB,QAArB;AACA;AACD,SAAK,CAAL;AACC,UAAKA,aAAL,GAAqB,QAArB;AACA;AACD,SAAK,CAAL;AACC,UAAKA,aAAL,GAAqB,QAArB;AACA;AACD;AACC,WAAM,IAAI7B,KAAJ,CAAU,gEAAV,CAAN;AAxBF;AA0BA;;AAEA;AACA,WAAQX,OAAOyD,QAAP,CAAgB,CAAhB,CAAD,CAAqB,CAArB,CAAP;AAEC,SAAK,CAAL;AACC,UAAKhB,kBAAL,GAA0B,WAA1B;AACA;AACD,SAAK,CAAL;AACC,UAAKA,kBAAL,GAA0B,KAA1B;AACA;AACD,SAAK,CAAL;AACC,UAAKA,kBAAL,GAA0B,KAA1B;AACA;AACD,SAAK,CAAL;AACC,UAAKA,kBAAL,GAA0B,OAA1B;AACA;AACD;AACC,WAAM,IAAI9B,KAAJ,CAAU,gEAAV,CAAN;AAfF;AAiBA;;AAEA;AACA,SAAMgD,kBAAkB3D,OAAOwD,SAAP,EAAxB;AACA,SAAMI,gBAAiB,IAAI3C,UAAJ,CAAejB,OAAOyD,QAAP,CAAgBE,eAAhB,CAAf,CAAD,CAAmDN,MAAnD,CAA0D5B,KAA1D,CAAgE,CAAhE,CAAtB;;AAEA,SAAMoC,OAAO5B,OAAO6B,OAAP,CAAeF,aAAf,CAAb;AACA,OAAGC,KAAKE,MAAL,KAAiB,CAAC,CAArB,EACC,MAAM,IAAIpD,KAAJ,CAAU,gEAAV,CAAN;;AAED,QAAK+B,SAAL,GAAiBmB,KAAKG,MAAtB;AACA;;AAEA,OAAGT,gBAAiB,KAAKG,gBAAL,GAAwBC,eAA5C,EACC,MAAM,IAAIhD,KAAJ,CAAU,gEAAV,CAAN;AACD;AACD;AACD;AACA;;;;AAIAQ,YACA;AACC,QAAMnB,SAAS,KAAKiE,QAAL,EAAf;;AAEA,SAAO,IAAIhC,OAAOiB,OAAX,CAAmB,EAAEI,MAAMtD,OAAOA,MAAP,CAAcqD,MAAtB,EAAnB,CAAP;AACA;AACD;AACA;;;;AAIAY,YACA;AACC,QAAMjE,SAAS,IAAIC,uBAAJ,EAAf;;AAEAD,SAAOkE,YAAP,CAAoB,KAAK,KAAK3D,UAAL,CAAgBe,UAArB,GAAkC,KAAKoB,SAAL,CAAeyB,iBAAf,CAAiC7C,UAAvF;AACAtB,SAAOoE,UAAP,CAAkB,KAAK/B,OAAvB;AACArC,SAAOoB,UAAP,CAAkB,IAAIH,UAAJ,CAAe,KAAKsB,KAApB,CAAlB;;AAEA,QAAM8B,aAAa,IAAItB,WAAJ,CAAgB,CAAhB,CAAnB;AACA,QAAMuB,WAAW,IAAIrD,UAAJ,CAAeoD,UAAf,CAAjB;;AAEA,QAAME,YAAY,yBAAW,KAAK3C,SAAL,CAAe4C,OAAf,EAAX,EAAqC,CAArC,CAAlB;AACAF,WAASG,GAAT,CAAa,IAAIxD,UAAJ,CAAesD,SAAf,CAAb,EAAwC,IAAIA,UAAUjD,UAAtD;;AAEAtB,SAAOoB,UAAP,CAAkBkD,QAAlB;AACAtE,SAAOkE,YAAP,CAAoB,KAAK3D,UAAL,CAAgBe,UAApC;;AAEA,MAAG,KAAKf,UAAL,CAAgBe,UAAnB,EACCtB,OAAOoB,UAAP,CAAkB,IAAIH,UAAJ,CAAe,KAAKV,UAApB,CAAlB;;AAED,MAAImE,cAAJ;;AAEA,UAAO,KAAKlC,aAAL,CAAmBmC,WAAnB,EAAP;AAEC,QAAK,MAAL;AACCD,qBAAiB,CAAjB;AACA;AACD,QAAK,KAAL;AACCA,qBAAiB,CAAjB;AACA;AACD,QAAK,MAAL;AACCA,qBAAiB,CAAjB;AACA;AACD,QAAK,QAAL;AACCA,qBAAiB,CAAjB;AACA;AACD,QAAK,QAAL;AACCA,qBAAiB,CAAjB;AACA;AACD,QAAK,QAAL;AACCA,qBAAiB,CAAjB;AACA;AACD,QAAK,QAAL;AACCA,qBAAiB,CAAjB;AACA;AACD;AACC,UAAM,IAAI/D,KAAJ,CAAW,qCAAoC,KAAK6B,aAAc,EAAlE,CAAN;AAxBF;;AA2BAxC,SAAOoE,UAAP,CAAkBM,cAAlB;;AAEA,MAAIE,mBAAJ;;AAEA,UAAO,KAAKnC,kBAAL,CAAwBkC,WAAxB,EAAP;AAEC,QAAK,WAAL;AACCC,0BAAsB,CAAtB;AACA;AACD,QAAK,KAAL;AACCA,0BAAsB,CAAtB;AACA;AACD,QAAK,KAAL;AACCA,0BAAsB,CAAtB;AACA;AACD,QAAK,OAAL;AACCA,0BAAsB,CAAtB;AACA;AACD;AACC,UAAM,IAAIjE,KAAJ,CAAW,0CAAyC,KAAK8B,kBAAmB,EAA5E,CAAN;AAfF;;AAkBAzC,SAAOoE,UAAP,CAAkBQ,mBAAlB;;AAEA,QAAMC,aAAa,KAAKnC,SAAL,CAAe5B,KAAf,CAAqB,KAArB,CAAnB;;AAEAd,SAAOkE,YAAP,CAAoBW,WAAWvD,UAA/B;AACAtB,SAAOoB,UAAP,CAAkB,IAAIH,UAAJ,CAAe4D,UAAf,CAAlB;;AAEA,SAAO7E,MAAP;AACA;AACD;AACA;;;;AAIA8E,UACA;AACC,SAAO;AACNzC,YAAS,KAAKA,OADR;AAENE,UAAO,+BAAiB,KAAKA,KAAtB,CAFD;AAGNX,cAAW,KAAKA,SAHV;AAINrB,eAAY,+BAAiB,KAAKA,UAAtB,CAJN;AAKNiC,kBAAe,KAAKA,aALd;AAMNC,uBAAoB,KAAKA,kBANnB;AAONC,cAAW,KAAKA,SAAL,CAAeoC,MAAf;AAPL,GAAP;AASA;AACD;AACA;;;;;;;;;AASMhD,OAAN,CAAanC,IAAb,EAAmB2D,IAAnB,EAAyByB,WAAW,CAApC,EACA;AAAA;;AAAA;AACC;AACA,OAAIC,QAAQ,uBAAS,kCAAoB,MAAKzC,KAAzB,CAAT,CAAZ;;AAEA,OAAI0C,kBAAkB,IAAtB;AACA,OAAIC,aAAJ;;AAEA,OAAIlF,SAAS,IAAIC,uBAAJ,EAAb;AACA;;AAEA;AAVD;AAAA;AAAA;;AAAA;AAWC,yBAAiBN,IAAjB,8HACA;AAAA,WADUwF,GACV;;AACC,SAAGA,IAAIC,MAAJ,KAAeJ,KAAlB,EACA;AACCC,wBAAkBE,IAAIE,GAAtB;AACA;AACA;AACD;AAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBC,OAAGJ,oBAAoB,IAAvB,EACC,MAAM,IAAItE,KAAJ,CAAW,2CAA0CqE,KAAM,EAA3D,CAAN;;AAED,SAAMnB,OAAO5B,OAAO6B,OAAP,CAAe,kCAAoB,yBAAWmB,eAAX,CAApB,CAAf,CAAb;AACA,OAAGpB,KAAKE,MAAL,KAAiB,CAAC,CAArB,EACC,MAAM,IAAIpD,KAAJ,CAAW,8CAA6CqE,KAAM,EAA9D,CAAN;;AAEDE,mBAAgB,IAAII,uBAAJ,CAAkB,EAAE1C,QAAQiB,KAAKG,MAAf,EAAlB,CAAhB;AACA;;AAEA;AACAhE,UAAOoE,UAAP,CAAkB,IAAlB,EA/BD,CA+B0B;AACzBpE,UAAOoE,UAAP,CAAkB,IAAlB,EAhCD,CAgC0B;;AAEzB,SAAMC,aAAa,IAAItB,WAAJ,CAAgB,CAAhB,CAAnB;AACA,SAAMuB,WAAW,IAAIrD,UAAJ,CAAeoD,UAAf,CAAjB;;AAEA,SAAME,YAAY,yBAAW,MAAK3C,SAAL,CAAe4C,OAAf,EAAX,EAAqC,CAArC,CAAlB;AACAF,YAASG,GAAT,CAAa,IAAIxD,UAAJ,CAAesD,SAAf,CAAb,EAAwC,IAAIA,UAAUjD,UAAtD;;AAEAtB,UAAOoB,UAAP,CAAkBkD,QAAlB;;AAEAtE,UAAOkE,YAAP,CAAoBa,QAApB;;AAEA,OAAGA,aAAa,CAAhB,EACC/E,OAAOqB,YAAP,CAAoBiC,KAAKhC,UAAzB;;AAEDtB,UAAOoB,UAAP,CAAkB,IAAIH,UAAJ,CAAeqC,IAAf,CAAlB;;AAEAtD,UAAOkE,YAAP,CAAoB,MAAK3D,UAAL,CAAgBe,UAApC;;AAEA,OAAG,MAAKf,UAAL,CAAgBe,UAAhB,KAA+B,CAAlC,EACCtB,OAAOoB,UAAP,CAAkB,IAAIH,UAAJ,CAAe,MAAKV,UAApB,CAAlB;AACD;;AAEA;AACA,UAAO,yBAAYgF,MAAZ,CAAmBC,mBAAnB,CACNxF,OAAOuB,OAAP,CAAeC,OAAf,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCzB,OAAO0B,OAAvC,CADM,EAEN,EAAE+D,YAAY,EAAEC,UAAU,MAAKhD,SAAL,CAAe5B,KAAf,CAAqB,KAArB,CAAZ,EAAd,EAFM,EAGNoE,aAHM,EAIN,EAAES,aAAa,EAAf,EAJM,EAKN,SALM,CAAP;AAOA;AA/DD;AAgEC;AACD;AAtXD;QADazD,0B,GAAAA,0B,EAyXb;AACA;;;;AAGe,MAAM0D,8BAAN,CACf;AACC;AACA;;;;;AAKAzD,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAK1B,UAAL,GAAkB,iCAAmB0B,UAAnB,EAA+B,YAA/B,EAA6CwD,+BAA+BtD,aAA/B,CAA6C,YAA7C,CAA7C,CAAlB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKO,UAAL,CAAgBP,WAAWQ,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAON,aAAP,CAAqBQ,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,YAAL;AACC,WAAO,EAAP;AACD;AACC,UAAM,IAAInC,KAAJ,CAAW,iEAAgEmC,UAAW,EAAtF,CAAN;AALF;AAOA;AACD;AACA;;;;;AAKA,QAAO+C,kBAAP,CAA0B/C,UAA1B,EAAsCgD,WAAtC,EACA;AACC,UAAOhD,UAAP;AAEC,QAAK,YAAL;AACC,WAAQgD,YAAYtF,MAAZ,KAAuB,CAA/B;AACD;AACC,UAAM,IAAIG,KAAJ,CAAW,iEAAgEmC,UAAW,EAAtF,CAAN;AALF;AAOA;AACD;AACA;;;;;;;;;;;AAWA,QAAOF,MAAP,CAAcR,aAAa,EAA3B,EACA;AACC;;;;;AAKA,QAAM2D,QAAQ,iCAAmB3D,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,MAAI,cAAc2D,KAAf,KAA0B,KAA7B,EACCA,MAAMC,QAAN,GAAiB,KAAjB;;AAED,SAAQ,IAAI/D,OAAOgE,WAAX,CAAuB;AAC9BjF,SAAO+E,MAAMG,SAAN,IAAmB,gCADI;AAE9BF,aAAUD,MAAMC;AAFc,GAAvB,CAAR;AAIA;AACD;AACA;;;;AAIArD,YAAWC,MAAX,EACA;AACC;AACA,MAAIA,kBAAkBX,OAAOgE,WAA1B,KAA2C,KAA9C,EACC,MAAM,IAAItF,KAAJ,CAAU,wFAAV,CAAN;AACD;;AAEA;AACA,QAAMwC,YAAY,IAAIlD,uBAAJ,CAAc;AAC/BD,WAAQ,IAAIoD,wBAAJ,CAAe;AACtBC,YAAQT,OAAO6C,UAAP,CAAkBC;AADJ,IAAf;AADuB,GAAd,CAAlB;;AAMA,MAAIS,aAAahD,UAAUK,SAAV,EAAjB;AACA,MAAG2C,eAAehD,UAAU3C,MAA5B,EACC,MAAM,IAAIG,KAAJ,CAAU,wFAAV,CAAN;;AAED,SAAMwC,UAAU3C,MAAhB,EACC,KAAKE,UAAL,CAAgBqB,IAAhB,CAAqB,IAAIG,0BAAJ,CAA+B,EAAElC,QAAQmD,SAAV,EAA/B,CAArB;AACD;AACA;AACD;AACA;;;;AAIAhC,YACA;AACC;AACA,QAAMnB,SAAS,IAAIC,uBAAJ,EAAf;;AAEA,MAAImG,gBAAgB,CAApB;;AAEA,QAAMC,iBAAiB,EAAvB;AACA;;AAEA;AATD;AAAA;AAAA;;AAAA;AAUC,yBAAuB,KAAK3F,UAA5B,mIACA;AAAA,UADUkB,SACV;;AACC,UAAM0E,kBAAkB1E,UAAUqC,QAAV,EAAxB;AACAoC,mBAAetE,IAAf,CAAoBuE,eAApB;AACAF,qBAAiBE,gBAAgBtG,MAAhB,CAAuBqD,MAAvB,CAA8B/B,UAA/C;AACA;AACD;AAhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBCtB,SAAOkE,YAAP,CAAoBkC,aAApB;;AAEA;AApBD;AAAA;AAAA;;AAAA;AAqBC,yBAAuBC,cAAvB;AAAA,UAAUzE,SAAV;;AACC5B,WAAOoB,UAAP,CAAkBQ,UAAU5B,MAAV,CAAiBuG,IAAnC;AADD,IArBD,CAuBC;AAvBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBC,SAAO,IAAItE,OAAOgE,WAAX,CAAuB,EAAEP,UAAU1F,OAAOA,MAAP,CAAcqD,MAAd,CAAqB5B,KAArB,CAA2B,CAA3B,CAAZ,EAAvB,CAAP;AACA;AACD;AACA;;;;AAIAqD,UACA;AACC,SAAO;AACNpE,eAAY8F,MAAMC,IAAN,CAAW,KAAK/F,UAAhB,EAA4BgG,WAAWA,QAAQ5B,MAAR,EAAvC;AADN,GAAP;AAGA;AACD;AAzJD,C,kBADqBc,8B","file":"SignedCertificateTimestampList.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilFromBase, utilToBase, bufferToHexCodes, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\nimport { ByteStream, SeqStream } from \"bytestreamjs\";\r\nimport { getCrypto, getEngine } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\n//**************************************************************************************\r\nexport class SignedCertificateTimestamp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedCertificateTimestamp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc logID\r\n\t\t */\r\n\t\tthis.logID = getParametersValue(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc timestamp\r\n\t\t */\r\n\t\tthis.timestamp = getParametersValue(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc extensions\r\n\t\t */\r\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"stream\"\r\n\t\tif(\"stream\" in parameters)\r\n\t\t\tthis.fromStream(parameters.stream);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"logID\":\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"timestamp\":\r\n\t\t\t\treturn new Date(0);\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestamp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\tif((schema instanceof asn1js.RawData) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\r\n\t\t\r\n\t\tconst seqStream = new SeqStream({\r\n\t\t\tstream: new ByteStream({\r\n\t\t\t\tbuffer: schema.data\r\n\t\t\t})\r\n\t\t});\r\n\t\t\r\n\t\tthis.fromStream(seqStream);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert SeqStream data into current class\r\n\t * @param {!SeqStream} stream\r\n\t */\r\n\tfromStream(stream)\r\n\t{\r\n\t\tconst blockLength = stream.getUint16();\r\n\t\t\r\n\t\tthis.version = (stream.getBlock(1))[0];\r\n\t\t\r\n\t\tif(this.version === 0)\r\n\t\t{\r\n\t\t\tthis.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\r\n\t\t\tthis.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\r\n\t\t\t\r\n\t\t\t//region Extensions\r\n\t\t\tconst extensionsLength = stream.getUint16();\r\n\t\t\tthis.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Hash algorithm\r\n\t\t\tswitch((stream.getBlock(1))[0])\r\n\t\t\t{\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis.hashAlgorithm = \"none\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.hashAlgorithm = \"md5\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha1\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha224\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha256\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha384\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha512\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Signature algorithm\r\n\t\t\tswitch((stream.getBlock(1))[0])\r\n\t\t\t{\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis.signatureAlgorithm = \"anonymous\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.signatureAlgorithm = \"rsa\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.signatureAlgorithm = \"dsa\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.signatureAlgorithm = \"ecdsa\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Signature\r\n\t\t\tconst signatureLength = stream.getUint16();\r\n\t\t\tconst signatureData = (new Uint8Array(stream.getBlock(signatureLength))).buffer.slice(0);\r\n\t\t\t\r\n\t\t\tconst asn1 = asn1js.fromBER(signatureData);\r\n\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n\t\t\t\r\n\t\t\tthis.signature = asn1.result;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(blockLength !== (47 + extensionsLength + signatureLength))\r\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst stream = this.toStream();\r\n\t\t\r\n\t\treturn new asn1js.RawData({ data: stream.stream.buffer });\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to SeqStream data\r\n\t * @returns {SeqStream} SeqStream object\r\n\t */\r\n\ttoStream()\r\n\t{\r\n\t\tconst stream = new SeqStream();\r\n\t\t\r\n\t\tstream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\r\n\t\tstream.appendChar(this.version);\r\n\t\tstream.appendView(new Uint8Array(this.logID));\r\n\t\t\r\n\t\tconst timeBuffer = new ArrayBuffer(8);\r\n\t\tconst timeView = new Uint8Array(timeBuffer);\r\n\t\t\r\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\r\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\r\n\t\t\r\n\t\tstream.appendView(timeView);\r\n\t\tstream.appendUint16(this.extensions.byteLength);\r\n\t\t\r\n\t\tif(this.extensions.byteLength)\r\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\r\n\t\t\r\n\t\tlet _hashAlgorithm;\r\n\t\t\r\n\t\tswitch(this.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"none\":\r\n\t\t\t\t_hashAlgorithm = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"md5\":\r\n\t\t\t\t_hashAlgorithm = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha1\":\r\n\t\t\t\t_hashAlgorithm = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha224\":\r\n\t\t\t\t_hashAlgorithm = 3;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha256\":\r\n\t\t\t\t_hashAlgorithm = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha384\":\r\n\t\t\t\t_hashAlgorithm = 5;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha512\":\r\n\t\t\t\t_hashAlgorithm = 6;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\r\n\t\t}\r\n\t\t\r\n\t\tstream.appendChar(_hashAlgorithm);\r\n\t\t\r\n\t\tlet _signatureAlgorithm;\r\n\t\t\r\n\t\tswitch(this.signatureAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"anonymous\":\r\n\t\t\t\t_signatureAlgorithm = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rsa\":\r\n\t\t\t\t_signatureAlgorithm = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"dsa\":\r\n\t\t\t\t_signatureAlgorithm = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ecdsa\":\r\n\t\t\t\t_signatureAlgorithm = 3;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\r\n\t\t}\r\n\t\t\r\n\t\tstream.appendChar(_signatureAlgorithm);\r\n\t\t\r\n\t\tconst _signature = this.signature.toBER(false);\r\n\t\t\r\n\t\tstream.appendUint16(_signature.byteLength);\r\n\t\tstream.appendView(new Uint8Array(_signature));\r\n\t\t\r\n\t\treturn stream;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tlogID: bufferToHexCodes(this.logID),\r\n\t\t\ttimestamp: this.timestamp,\r\n\t\t\textensions: bufferToHexCodes(this.extensions),\r\n\t\t\thashAlgorithm: this.hashAlgorithm,\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm,\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify SignedCertificateTimestamp for specific input data\r\n\t * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\r\n\t * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\r\n\t * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\r\n\t * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\r\n\t * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\r\n\t * @return {Promise<void>}\r\n\t */\r\n\tasync verify(logs, data, dataType = 0)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet logId = toBase64(arrayBufferToString(this.logID));\r\n\t\t\r\n\t\tlet publicKeyBase64 = null;\r\n\t\tlet publicKeyInfo;\r\n\t\t\r\n\t\tlet stream = new SeqStream();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Found and init public key\r\n\t\tfor(const log of logs)\r\n\t\t{\r\n\t\t\tif(log.log_id === logId)\r\n\t\t\t{\r\n\t\t\t\tpublicKeyBase64 = log.key;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(publicKeyBase64 === null)\r\n\t\t\tthrow new Error(`Public key not found for CT with logId: ${logId}`);\r\n\t\t\r\n\t\tconst asn1 = asn1js.fromBER(stringToArrayBuffer(fromBase64(publicKeyBase64)));\r\n\t\tif(asn1.offset === (-1))\r\n\t\t\tthrow new Error(`Incorrect key value for CT Log with logId: ${logId}`);\r\n\t\t\r\n\t\tpublicKeyInfo = new PublicKeyInfo({ schema: asn1.result });\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize signed data block\r\n\t\tstream.appendChar(0x00); // sct_version\r\n\t\tstream.appendChar(0x00); // signature_type = certificate_timestamp\r\n\t\t\r\n\t\tconst timeBuffer = new ArrayBuffer(8);\r\n\t\tconst timeView = new Uint8Array(timeBuffer);\r\n\t\t\r\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\r\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\r\n\t\t\r\n\t\tstream.appendView(timeView);\r\n\t\t\r\n\t\tstream.appendUint16(dataType);\r\n\t\t\r\n\t\tif(dataType === 0)\r\n\t\t\tstream.appendUint24(data.byteLength);\r\n\t\t\r\n\t\tstream.appendView(new Uint8Array(data));\r\n\t\t\r\n\t\tstream.appendUint16(this.extensions.byteLength);\r\n\t\t\r\n\t\tif(this.extensions.byteLength !== 0)\r\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform verification\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(\r\n\t\t\tstream._stream._buffer.slice(0, stream._length),\r\n\t\t\t{ valueBlock: { valueHex: this.signature.toBER(false) } },\r\n\t\t\tpublicKeyInfo,\r\n\t\t\t{ algorithmId: \"\" },\r\n\t\t\t\"SHA-256\"\r\n\t\t);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6962\r\n */\r\nexport default class SignedCertificateTimestampList\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedCertificateTimestampList class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<SignedCertificateTimestamp>}\r\n\t\t * @desc timestamps\r\n\t\t */\r\n\t\tthis.timestamps = getParametersValue(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"timestamps\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"timestamps\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedCertificateTimestampList ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.OctetString({\r\n\t\t\tname: (names.blockName || \"SignedCertificateTimestampList\"),\r\n\t\t\toptional: names.optional\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof asn1js.OctetString) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst seqStream = new SeqStream({\r\n\t\t\tstream: new ByteStream({\r\n\t\t\t\tbuffer: schema.valueBlock.valueHex\r\n\t\t\t})\r\n\t\t});\r\n\t\t\r\n\t\tlet dataLength = seqStream.getUint16();\r\n\t\tif(dataLength !== seqStream.length)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\r\n\t\t\r\n\t\twhile(seqStream.length)\r\n\t\t\tthis.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst stream = new SeqStream();\r\n\t\t\r\n\t\tlet overallLength = 0;\r\n\t\t\r\n\t\tconst timestampsData = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get overall length\r\n\t\tfor(const timestamp of this.timestamps)\r\n\t\t{\r\n\t\t\tconst timestampStream = timestamp.toStream();\r\n\t\t\ttimestampsData.push(timestampStream);\r\n\t\t\toverallLength += timestampStream.stream.buffer.byteLength;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tstream.appendUint16(overallLength);\r\n\t\t\r\n\t\t//region Set data from all timestamps\r\n\t\tfor(const timestamp of timestampsData)\r\n\t\t\tstream.appendView(timestamp.stream.view);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttimestamps: Array.from(this.timestamps, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Verify SignedCertificateTimestamp for specific certificate content\r\n * @param {Certificate} certificate Certificate for which verification would be performed\r\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\r\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\r\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\r\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\r\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\r\n * @return {Array} Array of verification results\r\n */\r\nexport async function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1))\r\n{\r\n\t//region Initial variables\r\n\tlet parsedValue = null;\r\n\tlet tbs;\r\n\tlet issuerId;\r\n\t\r\n\tconst stream = new SeqStream();\r\n\t\r\n\tlet preCert;\r\n\t//endregion\r\n\t\r\n\t//region Get a \"crypto\" extension\r\n\tconst crypto = getCrypto();\r\n\tif(typeof crypto === \"undefined\")\r\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t//endregion\r\n\t\r\n\t//region Remove certificate extension\r\n\tfor(let i = 0; i < certificate.extensions.length; i++)\r\n\t{\r\n\t\tswitch(certificate.extensions[i].extnID)\r\n\t\t{\r\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\tparsedValue = certificate.extensions[i].parsedValue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parsedValue.timestamps.length === 0)\r\n\t\t\t\t\t\tthrow new Error(\"Nothing to verify in the certificate\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tcertificate.extensions.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Check we do have what to verify\r\n\tif(parsedValue === null)\r\n\t\tthrow new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\r\n\t//endregion\r\n\t\r\n\t//region Prepare modifier TBS value\r\n\ttbs = certificate.encodeTBS().toBER(false);\r\n\t//endregion\r\n\t\r\n\t//region Initialize \"issuer_key_hash\" value\r\n\tissuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\r\n\t//endregion\r\n\t\r\n\t//region Make final \"PreCert\" value\r\n\tstream.appendView(new Uint8Array(issuerId));\r\n\tstream.appendUint24(tbs.byteLength);\r\n\tstream.appendView(new Uint8Array(tbs));\r\n\t\r\n\tpreCert = stream._stream._buffer.slice(0, stream._length);\r\n\t//endregion\r\n\t\r\n\t//region Call verification function for specified index\r\n\tif(index === (-1))\r\n\t{\r\n\t\tconst verifyArray = [];\r\n\t\t\r\n\t\tfor(const timestamp of parsedValue.timestamps)\r\n\t\t{\r\n\t\t\tconst verifyResult = await timestamp.verify(logs, preCert, 1);\r\n\t\t\tverifyArray.push(verifyResult);\r\n\t\t}\r\n\t\t\r\n\t\treturn verifyArray;\r\n\t}\r\n\t\r\n\tif(index >= parsedValue.timestamps.length)\r\n\t\tindex = (parsedValue.timestamps.length - 1);\r\n\t\r\n\treturn [await parsedValue.timestamps[index].verify(logs, preCert, 1)];\r\n\t//endregion\r\n}\r\n//**********************************************************************************\r\n"]}