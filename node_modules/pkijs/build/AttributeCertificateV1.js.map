{"version":3,"sources":["../src/AttributeCertificateV1.js"],"names":["asn1js","AttCertValidityPeriod","constructor","parameters","notBeforeTime","defaultValues","notAfterTime","fromSchema","schema","memberName","Date","Error","names","Sequence","name","blockName","value","GeneralizedTime","asn1","compareSchema","verified","result","toDate","toSchema","valueDate","toJSON","IssuerSerial","issuer","serialNumber","issuerUID","GeneralNames","Integer","BitString","optional","valueBlock","push","AttributeCertificateInfoV1","version","baseCertificateID","subjectName","signature","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","AlgorithmIdentifier","Extensions","Choice","Constructed","idBlock","tagClass","tagNumber","Repeated","Attribute","valueDec","Array","from","element","AttributeCertificateV1","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","file":"AttributeCertificateV1.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralNames from \"./GeneralNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttCertValidityPeriod\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttCertValidityPeriod class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @desc notBeforeTime\r\n\t\t */\r\n\t\tthis.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @desc notAfterTime\r\n\t\t */\r\n\t\tthis.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"notBeforeTime\":\r\n\t\t\tcase \"notAfterTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttCertValidityPeriod  ::= SEQUENCE {\r\n\t *   notBeforeTime  GeneralizedTime,\r\n\t *   notAfterTime   GeneralizedTime\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [notBeforeTime]\r\n\t\t * @property {string} [notAfterTime]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notBeforeTime || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notAfterTime || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"notBeforeTime\",\r\n\t\t\t\"notAfterTime\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttCertValidityPeriod.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tnotBeforeTime: \"notBeforeTime\",\r\n\t\t\t\t\tnotAfterTime: \"notAfterTime\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.notBeforeTime = asn1.result.notBeforeTime.toDate();\r\n\t\tthis.notAfterTime = asn1.result.notAfterTime.toDate();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnotBeforeTime: this.notBeforeTime,\r\n\t\t\tnotAfterTime: this.notAfterTime\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class IssuerSerial\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerSerial class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\r\n\t\t\r\n\t\tif(\"issuerUID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc issuerUID\r\n\t\t\t */\r\n\t\t\tthis.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"issuerUID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * IssuerSerial  ::=  SEQUENCE {\r\n\t *   \tissuer         GeneralNames,\r\n\t * \t\tserial         CertificateSerialNumber,\r\n\t * \t\tissuerUID      UniqueIdentifier OPTIONAL\r\n\t * }\r\n\t *\r\n\t * CertificateSerialNumber ::= INTEGER\r\n\t * UniqueIdentifier  ::=  BIT STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [issuerUID]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUID || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuer\",\r\n\t\t\t\"serialNumber\",\r\n\t\t\t\"issuerUID\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerSerial.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tissuerUID: \"issuerUID\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t\r\n\t\tif(\"issuerUID\" in asn1.result)\r\n\t\t\tthis.issuerUID = asn1.result.issuerUID;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUID);\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.issuerUID = this.issuerUID.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttributeCertificateInfoV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateInfoV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @desc baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"subjectName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @desc subjectName\r\n\t\t\t */\r\n\t\t\tthis.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {GeneralNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AttCertValidityPeriod}\r\n\t\t * @desc attrCertValidityPeriod\r\n\t\t */\r\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Attribute>}\r\n\t\t * @desc attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\r\n\t\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"subjectName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"attrCertValidityPeriod\":\r\n\t\t\t\treturn new AttCertValidityPeriod();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeCertificateInfo ::= SEQUENCE {\r\n\t * \tversion Version DEFAULT v1,\r\n\t * \tsubject CHOICE {\r\n\t * \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\r\n\t * \t\tsubjectName [1] GeneralNames }, -- associated with a name\r\n\t * \tissuer GeneralNames, -- CA issuing the attribute certificate\r\n\t * \tsignature AlgorithmIdentifier,\r\n\t * \tserialNumber CertificateSerialNumber,\r\n\t * \tattrCertValidityPeriod AttCertValidityPeriod,\r\n\t * \tattributes SEQUENCE OF Attribute,\r\n\t * \tissuerUniqueID UniqueIdentifier OPTIONAL,\r\n\t * \textensions Extensions OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.subjectName || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.issuer || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"baseCertificateID\",\r\n\t\t\t\"subjectName\",\r\n\t\t\t\"issuer\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"serialNumber\",\r\n\t\t\t\"attrCertValidityPeriod\",\r\n\t\t\t\"attributes\",\r\n\t\t\t\"issuerUniqueID\",\r\n\t\t\t\"extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateInfoV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tsubjectName: \"subjectName\",\r\n\t\t\t\t\tissuer: \"issuer\",\r\n\t\t\t\t\tsignature: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signature\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tattrCertValidityPeriod: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tattributes: \"attributes\",\r\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\r\n\t\t\t\t\textensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"extensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.subjectName = new GeneralNames({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.subjectName.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.issuer = asn1.result.issuer;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\r\n\t\t\r\n\t\tif(\"extensions\" in asn1.result)\r\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectName\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.subjectName.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tresult.valueBlock.value.push(this.issuer.toSchema());\r\n\t\tresult.valueBlock.value.push(this.signature.toSchema());\r\n\t\tresult.valueBlock.value.push(this.serialNumber);\r\n\t\tresult.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\r\n\t\tresult.valueBlock.value.push(new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"subjectName\" in this)\r\n\t\t\tresult.subjectName = this.subjectName.toJSON();\r\n\r\n\t\tresult.issuer = this.issuer.toJSON();\r\n\t\tresult.signature = this.signature.toJSON();\r\n\t\tresult.serialNumber = this.serialNumber.toJSON();\r\n\t\tresult.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\r\n\t\tresult.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.extensions = this.extensions.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from X.509:1997\r\n */\r\nexport default class AttributeCertificateV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AttributeCertificateInfoV1}\r\n\t\t * @desc acinfo\r\n\t\t */\r\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"acinfo\":\r\n\t\t\t\treturn new AttributeCertificateInfoV1();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeCertificate ::= SEQUENCE {\r\n\t *   acinfo               AttributeCertificateInfoV1,\r\n\t *   signatureAlgorithm   AlgorithmIdentifier,\r\n\t *   signatureValue       BIT STRING\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {Object} [acinfo]\r\n\t\t * @property {Object} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAttributeCertificateInfoV1.schema(names.acinfo || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"acinfo\",\r\n\t\t\t\"signatureValue\",\r\n\t\t\t\"signatureAlgorithm\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tacinfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"acinfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureValue: \"signatureValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.acinfo.toSchema(),\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tacinfo: this.acinfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}